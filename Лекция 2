#Работа со строками - строковой тип данных str
#Индексы, срезы.
text = 'я вас ЛЮБИЛ: любовь ЕЩЕ, быть может, в душе моей угасла не совсем;'
#К каждаму элементу строки можно обратиться по индексу или срезу при помощи []
# string[x:y:z] x - начло среза(индекс), у - конец среза, z - шаг.
# Индексация всегда начинается с 0, если не указать иное. Первый символ - нулевой индекс.
print(text[1])  # обращение по индексу
print(text[2:5]) # обращение по срезу от значений x до значения y не включая его
print(text[:5]) # обращение по срезу от начала до значения y
print(text[6:]) # обращение по среду от значения до конца
print(text[::2]) # обращение по срезу от начала до конца с шагом z
print(text[::-1])  # обращение по срезу от начала до конца с отрицательным шагом

#Методы строк
#Методы строк есть у каждого типа данных, обращение к ним происходит через точку str.replace()
print(text.capitalize()) # capitalize() - делает первый символ заглавным, остальные строчными
print(text.lower()) # lower() - делает все символы в строке строчными
print(text.upper()) # upper() - делает все символы в строке заглавными
print(text.replace(' ', '!')) #replace() - заменяет символы на другие
print(text.isalpha()) # isalpha() - проверяет состоит ли строка только из буквенных символов
print(text.isdigit()) # isdigit() - проверяет состоит ли строка только из цифр
print(text.split(' ')) # split() - разбивает строку на объекты списка по разделителю в аргументе

# Методы списков(тип данных:list)
new_list = [1, 2, 3, 'Привет', 'Hi', True, [4, 5, 6]]
new_list.append('Новый объек') # метод append добавляет в список
new_list.pop() # метод удаляет последний объект, если в аргументе не указан индекс
pop_list = new_list.pop() # кроме того, метод возвращает удаленный объект
new_list.remove(1) # метод, который удаляет конкретный объект, если он есть в списке иначе появиться ошибка
new_list.reverse() # метод reverse переворачивает список
print(new_list)

# Работа со словарями
# В словаре перечисляются через запятую пары ключей и значений, которые разделяются двоеточием
# Пример: name_dict = {key:valua, } сам словарь всегда обрамляется фигурными скобками
classes = {'1a': ['Петя', 'Маша', 'Ваня'],
           '2a': ['Оля', 'Катя', 'Серёжа'],
           '3a': ['Маша', 'Костя', 'Лена'],
           '4a': ['Олег', 'Максим', 'Андрей'],
           5: False,
           }
print(classes)  # Мы можем вывести весь словарь на экран
print(classes['1a']) # А можем обратиться к значению, которое храниться по уникальному ключу
print(classes['2a']) # Ключи в словаре никогда не повторяются, а значения могут быть одинаковыми
print(classes['3a'])

classes['5a'] = ['Вася', 'Ян', 'Алина']  # Чтобы добавить в словарь пару ключ и значение
# необходимо обратиться к этому словарю по несуществующему ключу и присвоить в его новое значение
# также можно изменить существующие значение

for key in classes: # при работе с циклом for в переменнную будут сохраняться ключи
    print(classes[key]) # чтобы вывести значение словаря, к нему необходимо обратиться по ключу
for key, value in classes.items(): # если использовать метод item, то можно получить сразу и ключ и значение
    print(f'По ключу {key} храниться  значение: {value}') # f-string позволяет использовать переменные в строке

# import random - команда импорт позволяет использовать всю библиотеку
# from (название библетеки) import (что импортировать) - схема
from random import randint, choice

print(randint(1,10)) # функция randint принимает в качестве аргументов  2 числа
random_number = randint(1,10)
# результат работы функции - случайное значение в заданном диапозоне

list_names = ['Паша', 'Петя', 'Оля', 'Валя']
print(choice(list_names)) # функция choice выбирает случайное значение из списка или строке
